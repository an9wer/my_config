set nocompatible
source $VIMRUNTIME/vimrc_example.vim
"source $VIMRUNTIME/mswin.vim
"behave mswin

filetype off                " required

set rtp+=D:/Vim/vimfiles/bundle/vundle.vim/
call vundle#begin('D:/Vim/vimfiles/bundle/')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" my plugin
" ----------------------------------------------------------------------------

" Scheme
Plugin 'tomasr/molokai'
" Plugin 'altercation/vim-colors-solarized'

"
Plugin 'scrooloose/nerdtree'
Plugin 'majutsushi/tagbar'
Plugin 'ctrlpvim/ctrlp.vim'
"
Plugin 'Raimondi/delimitMate'
Plugin 'yonchu/accelerated-smooth-scroll'
" Plugin 'easymotion/vim-easymotion'
Plugin 'terryma/vim-multiple-cursors'
"
Plugin 'craigemery/vim-autotag'
" Plugin 'Valloric/YouCompleteMe'
"
Plugin 'mbbill/undotree'
" ============================================================================


" vim-markdown
" Plugin 'godlygeek/tabular'
" Plugin 'plasticboy/vim-markdown'

call vundle#end()            " required
filetype plugin indent on    " required


set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction


" my config
" ----------------------------------------------------------------------------

" scheme
colorscheme molokai


set shiftwidth=4
set tabstop=4
set expandtab
set noautoindent

set number

" set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set fileencodings=ucs-bom,utf-8,latin1
set fileencoding=utf-8
set encoding=utf-8
set nobomb
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
language messages zh_CN.utf-8

" inoremap ( ()<ESC>i
" inoremap ) <ESC>f)a
" inoremap [ []<ESC>i
" inoremap ] <ESC>f]a
" inoremap { {}<ESC>i
" inoremap } <ESC>f}a

" undo file
set noundofile

" backup file
" need to crate a directory named with `vimbackup`
set backupdir=D:/Vim/vimbackup

" font
set guifont=Consolas:h15

" window size
set lines=45 columns=125

" 80列红线
if exists('+colorcolumn')
  set colorcolumn=80
else
    au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

" 改变 80 列线的颜色
" :highlight ColorColumn ctermbg=lightgrey guibg=lightgrey
"
" ============================================================================


" vim-markdown
" ----------------------------------------------------------------------------
let g:vim_markdown_folding_disabled = 1
"
" ============================================================================


" NERDTree config
" ----------------------------------------------------------------------------
" autocmd vimenter * NERDTree
map <F2> :NERDTreeToggle<CR>
"
" ignore some file and directory
let NERDTreeIgnore=['\.pyc$[[file]]', 'venv[[dir]]']
"
" show hidden file
let NERDTreeShowHidden=1
" ============================================================================


" ctrlp config (:h ctrlp)
" ----------------------------------------------------------------------------
" let g:ctrlp_max_history = 20
" let g:ctrlp_mruf_max = 250
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:20,results:20'
let g:ctrlp_custom_ignore = {
  \ 'dir': 'venv',
  \ }
" ============================================================================


" Tagbar config     (:h tagbar)
" ----------------------------------------------------------------------------
" 按 <F8> 开启 tagbar
nmap <F8> :TagbarToggle<CR>
" 打开 tagbar 的同时光标自动跳转到 tagbar 窗口
let g:tagbar_autofocus = 1
" 修改 tagbar 中的图标显示
let g:tagbar_iconchars = ['▸', '▾']
"
" ============================================================================


" delimitMate config      (:h delimitMate)
" ----------------------------------------------------------------------------
"  None 
"
" ============================================================================


" vim-multiple-cursors  (:h multiple-cursors)
" ----------------------------------------------------------------------------
"  None
"
" ============================================================================

" undotree      (:h undotree-contents)
" ----------------------------------------------------------------------------
nnoremap <F1> :UndotreeToggle<cr>
" 打开 undotree 的同时光标自动跳转到 undotree 窗口
let g:undotree_SetFocusWhenToggle = 1
"
" ============================================================================



