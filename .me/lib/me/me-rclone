#!/usr/bin/env bash

RCLONE_LOG=${ME_LOG_DIR}/rclone.log
RCLONE_CFG_DIR=${ME_CFG_DIR}/me-rclone


die() {
  me err "$*"
  exit 1
}

usage() {
  cat <<EOF
  Usage: me-rclone [<options>]

  Options:
    -l, --list                List all confs
    -c, --execute <conf>...   Run specified confs
    -a, --execute-all         Run all confs
    -n, --new-conf            Create a new conf
    -e, --edit-conf <conf>    Modify an existed conf
    -d, --delete-conf <conf>  Delete an existed conf
EOF
}

list() {
  local cfgs=( 
    $(find ${RCLONE_CFG_DIR} -type f -name '*.conf' ! -name 'example.conf' \
      -exec basename -s .conf {} \;)
  )
  for cfg in ${cfgs[@]}; do echo ${cfg}; done
}

execute() {
  local cfg_path

  [[ -z "$*" ]] && die "Missing argument <conf>."

  for cfg in $@; do
    cfg_path=$RCLONE_CFG_DIR/$cfg.conf

    if [[ ! -f $cfg_path ]]; then
      me warn "Unknown '$cfg'."
      continue
    fi

    unset FROM TO
    source $cfg_path

    if [[ -z $FROM ]]; then
      die "Empyt value 'FROM' found in '$cfg.conf'."
    fi

    if [[ -z $TO ]]; then
      die "Empty value 'TO' found in '$cfg.conf'."
    fi

    me info "Run 'rconle copy $FROM $TO' ..."
    if rclone copy "$FROM" "$TO"; then
      printf "\e[F"   # Move to previous line
      me info "Run 'rclone copy $FROM $TO' ...Done"
    else
      printf "\e[F"   # Move to previous line
      die "Run 'rclone copy $FROM $TO' ...Error"
    fi

  done
}

configure() {
  local mode=$1 cfg=$2
  local temp=$(mktemp) editor=${EDITOR:-nano} sure

  # Verify variable mode and cfg
  if [[ $mode == -n ]]; then
    read -p "Your configuration name: " cfg
  elif [[ $mode =~ -e|-d ]]; then
    [[ -z $cfg ]] && die "Missing argument <conf>."
  else
    die "Unknown mode"
  fi

  local cfg_path=$RCLONE_CFG_DIR/$cfg.conf

  # Verify existance of cfg file for new mode
  if [[ $mode == -n && -f $cfg_path ]]; then
    die "'$cfg' has already been existed."
  fi

  # Verify existance of cfg file for edit and delete mode
  if [[ $mode =~ ^-e$|^-d$ && ! -f $cfg_path ]]; then
    die "'$cfg' doesn't exist."
  fi

  # Delete mode
  if [[ $mode == -d ]]; then
    rm $cfg_path && me info "Succeed to remove '$cfg_path'."
    exit 0
  fi
  
  # New and edit mode
  cp -f $RCLONE_CFG_DIR/example.conf $temp
  $editor $temp

  [[ $mode == -n ]] && local create=create || local create=update
  for ((;;)) ; do
    read -p "Are you sure? [y/n]: " sure
    if [[ $sure =~ [Yy] ]]; then
      mv $temp "$cfg_path" && me info "Succeed to $create '$cfg_path'."
      break
    elif [[ $sure =~ [Nn] ]]; then
      me warn "Ignore your modification."
      break
    fi
  done
}

# main
case $1 in
  -l|--list        ) list ;;
  -c|--execute     ) shift; execute $@ ;;
  -a|--execute-all ) execute $(list) ;;
  -n|--new-conf    ) configure -n ;;
  -e|--edit-conf   ) configure -e $2 ;;
  -d|--delete-conf ) configure -d $2 ;;
  *                ) usage ;;
esac
