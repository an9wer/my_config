#!/usr/bin/env bash

RCLONE_LOG=${ME_LOG_DIR}/rclone.log
RCLONE_CFG_DIR=${ME_CFG_DIR}/me-rclone


die() {
  me err "$*"
  exit 1
}

usage() {
  cat <<EOF
  Usage: me-rclone [<options>]

  Options:
    -l, --list                List all confs
    -c, --execute <conf>...   Run specified confs
    -a, --execute-all         Run all confs
    -n, --new-conf            Create a new conf
    -v, --view-conf           Display content of a conf
    -e, --edit-conf <conf>    Modify a conf
    -d, --delete-conf <conf>  Delete a conf
EOF
}

list() {
  find "$RCLONE_CFG_DIR" \
    -type f \
    -name '*.conf' \
    ! -name 'example.conf' \
    -exec basename -s .conf {} \;
}

execute() {
  [[ -z "$*" ]] && die "Missing argument <conf>."

  local cfg_path

  for cfg in "$@"; do
    cfg_path=$RCLONE_CFG_DIR/$cfg.conf

    if [[ ! -f $cfg_path ]]; then
      me warn "Unknown '$cfg'."
      continue
    fi

    unset FROM TO
    source "$cfg_path"
    [[ -z $FROM ]] && die "Empyt value 'FROM' found in '$cfg.conf'."
    [[ -z $TO ]] && die "Empty value 'TO' found in '$cfg.conf'."

    # When notify-send is run in cron job, The DBUS_SESSION_BUS_ADDRESS
    # variable must be set correctly.
    export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u)/bus
    { 
      date=$(date)
      me info $date
      me info "Run 'rconle copy $FROM $TO'"

      if rclone copy -P "$FROM" "$TO"; then
        notify-send \
          -u low -a me-rclone \
          "$date" "Succeed to run:\n  'rclone copy $FROM $TO'"
      else
        notify-send \
          -u critical -a me-rclone \
          "$date" "Error occurs.\nSee file://${RCLONE_LOG}"
      fi

      echo -e "\n\n"
    } 2>&1 | tee -a "$RCLONE_LOG"

  done
}

configure() {
  local mode=$1 cfg=$2
  local cfg_path sure
  local temp=$(mktemp) editor=${EDITOR:-nano}

  # Delete mode
  if [[ $mode == -d ]]; then
    [[ -z $cfg ]] && die "Missing argument <conf>."
    cfg_path=$RCLONE_CFG_DIR/$cfg.conf
    [[ ! -f $cfg_path ]] && die "Conf '$cfg' doesn't exist."
    rm "$cfg_path" && me info "Succeed to remove '$cfg_path'."
    exit 0

  # New mode
  elif [[ $mode == -n ]]; then
    read -p "Your configuration name: " cfg
    cfg_path=$RCLONE_CFG_DIR/$cfg.conf
    [[ -f $cfg_path ]] && die "Conf '$cfg' has already been existed."
    cp -f "$RCLONE_CFG_DIR/example.conf" "$temp"

  # View mode
  elif [[ $mode == -v ]]; then
    [[ -z $cfg ]] && die "Missing argument <conf>."
    cfg_path=$RCLONE_CFG_DIR/$cfg.conf
    [[ ! -f $cfg_path ]] && die "Conf '$cfg' doesn't exist."
    cat "$cfg_path"
    exit 0

  # Edit mode
  elif [[ $mode == -e ]]; then
    [[ -z $cfg ]] && die "Missing argument <conf>."
    cfg_path=$RCLONE_CFG_DIR/$cfg.conf
    [[ ! -f $cfg_path ]] && die "Conf '$cfg' doesn't exist."
    cp -f "$cfg_path" "$temp"

  # Unknown mode
  else
    die "Unknown mode"
  fi

  "$editor" "$temp"

  [[ $mode == -n ]] && local create=create || local create=update
  for ((;;)) ; do
    read -p "Are you sure? [y/n]: " sure
    if [[ $sure =~ [Yy] ]]; then
      mv "$temp" "$cfg_path" && me info "Succeed to $create '$cfg_path'."
      break
    elif [[ $sure =~ [Nn] ]]; then
      me warn "Ignore your modification."
      break
    fi
  done
}


# main
case $1 in
  -l|--list        ) list ;;
  -c|--execute     ) shift; execute "$@" ;;
  -a|--execute-all ) execute $(list) ;;
  -n|--new-conf    ) configure -n ;;
  -v|--view-conf   ) configure -v "$2" ;;
  -e|--edit-conf   ) configure -e "$2" ;;
  -d|--delete-conf ) configure -d "$2" ;;
  --view-log       ) less -R "$RCLONE_LOG" ;;
  *                ) usage ;;
esac
